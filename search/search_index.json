{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python client for accessing PancakeSwap Lottery smart contract information through Web3.py Documentation : https://frefrik.github.io/pancakeswap-lottery Examples : https://frefrik.github.io/pancakeswap-lottery/guide/examples Source Code : https://github.com/frefrik/pancakeswap-lottery PyPI : https://pypi.org/project/pancakeswap-lottery Overview \u00b6 pancakeswap-lottery is a python interface to PancakeSwap Lottery smart contract endpoints. Requirements \u00b6 Python 3.8+ Web3.py - A python interface for interacting with the Ethereum blockchain and ecosystem. Installation \u00b6 pip install pancakeswap-lottery Successfully installed pancakeswap-lottery restart \u21bb Usage \u00b6 Example from pancakeswap_lottery import LotteryV2 lottery = LotteryV2 () # Get current lottery round number current_round = lottery . current_round () # Current ticket id ticketid = lottery . current_ticket () # Status of lottery round status = lottery . status () # Lottery draw date and time of lottery round draw_date = lottery . draw_date () # Ticket price in CAKE ticket_price = lottery . ticket_price () # Total prize pool of lottery round in CAKE prize_pool = lottery . prize_pool () # Prize pool allocation in CAKE allocation = lottery . prize_pool_allocation () # Total number of tickets in lottery round total_tickets = lottery . total_tickets ( lotteryround = 23 ) # Winning numbers for lottery round winning_numbers = lottery . winning_numbers ( lotteryround = 16 ) # Get lottery winnings (CAKE) for a given address and round address_winnings = lottery . address_winnings ( address = \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) # Get lottery winnings (CAKE) for a given ticket and round ticket_winnings = lottery . ticket_winnings ( lotteryround = 10 , ticketid = 158408 ) # Number of winners per prize bracket winners = lottery . winners_per_bracket ( lotteryround = 16 ) # Amount of CAKE won per ticket in each prize bracket cake_per_bracket = lottery . cake_per_bracket ( lotteryround = 16 ) # Percentage probability of winning the lottery winning_probability = lottery . winning_probability () # Data from historic lottery rounds can also be pulled ticket_price_hist = lottery . ticket_price ( lotteryround = 10 ) prize_pool_hist = lottery . prize_pool ( lotteryround = 10 ) allocation_hist = lottery . prize_pool_allocation ( lotteryround = 10 ) draw_date_hist = lottery . draw_date ( lotteryround = 10 ) status_hist = lottery . status ( lotteryround = 10 ) Data >>> lottery . current_round () 20 >>> lottery . current_ticket () 1124981 >>> lottery . status () Open >>> lottery . draw_date () 2021 - 07 - 12 20 : 00 : 00 >>> lottery . ticket_price () 0.32 >>> lottery . prize_pool () 63024 >>> lottery . prize_pool_allocation () { 'match_1' : 630 , 'match_2' : 1891 , 'match_3' : 3781 , 'match_4' : 6302 , 'match_5' : 12605 , 'match_6' : 25210 , 'burn' : 12605 } >>> lottery . total_tickets ( lotteryround = 23 ) 14253 >>> lottery . winning_numbers ( lotteryround = 16 ) 743350 >>> lottery . address_winnings ( \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) { 'tickets' : 8 , 'ticketids' : [ 634970 , 634971 , 634972 , 634973 , 634974 , 634975 , 634976 , 634977 ], 'winning_tickets' : [ 634970 , 634971 ]} >>> lottery . ticket_winnings ( lotteryround = 15 , ticketid = 567093 ) 865.536634168 >>> lottery . winners_per_bracket ( lotteryround = 16 ) { 'match_1' : 19133 , 'match_2' : 1921 , 'match_3' : 188 , 'match_4' : 21 , 'match_5' : 1 , 'match_6' : 1 } >>> lottery . cake_per_bracket ( lotteryround = 16 ) { 'match_1' : 0 , 'match_2' : 3 , 'match_3' : 62 , 'match_4' : 925 , 'match_5' : 38843 , 'match_6' : 77687 } >>> lottery . winning_probability () { 'match_1' : 10.0 , 'match_2' : 1.0 , 'match_3' : 0.1 , 'match_4' : 0.01 , 'match_5' : 0.001 , 'match_6' : 0.0001 } License \u00b6 This project is licensed under the terms of the MIT license. Disclaimer \u00b6 This project is not affiliated with the PancakeSwap team.","title":"Home"},{"location":"#overview","text":"pancakeswap-lottery is a python interface to PancakeSwap Lottery smart contract endpoints.","title":"Overview"},{"location":"#requirements","text":"Python 3.8+ Web3.py - A python interface for interacting with the Ethereum blockchain and ecosystem.","title":"Requirements"},{"location":"#installation","text":"pip install pancakeswap-lottery Successfully installed pancakeswap-lottery restart \u21bb","title":"Installation"},{"location":"#usage","text":"Example from pancakeswap_lottery import LotteryV2 lottery = LotteryV2 () # Get current lottery round number current_round = lottery . current_round () # Current ticket id ticketid = lottery . current_ticket () # Status of lottery round status = lottery . status () # Lottery draw date and time of lottery round draw_date = lottery . draw_date () # Ticket price in CAKE ticket_price = lottery . ticket_price () # Total prize pool of lottery round in CAKE prize_pool = lottery . prize_pool () # Prize pool allocation in CAKE allocation = lottery . prize_pool_allocation () # Total number of tickets in lottery round total_tickets = lottery . total_tickets ( lotteryround = 23 ) # Winning numbers for lottery round winning_numbers = lottery . winning_numbers ( lotteryround = 16 ) # Get lottery winnings (CAKE) for a given address and round address_winnings = lottery . address_winnings ( address = \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) # Get lottery winnings (CAKE) for a given ticket and round ticket_winnings = lottery . ticket_winnings ( lotteryround = 10 , ticketid = 158408 ) # Number of winners per prize bracket winners = lottery . winners_per_bracket ( lotteryround = 16 ) # Amount of CAKE won per ticket in each prize bracket cake_per_bracket = lottery . cake_per_bracket ( lotteryround = 16 ) # Percentage probability of winning the lottery winning_probability = lottery . winning_probability () # Data from historic lottery rounds can also be pulled ticket_price_hist = lottery . ticket_price ( lotteryround = 10 ) prize_pool_hist = lottery . prize_pool ( lotteryround = 10 ) allocation_hist = lottery . prize_pool_allocation ( lotteryround = 10 ) draw_date_hist = lottery . draw_date ( lotteryround = 10 ) status_hist = lottery . status ( lotteryround = 10 ) Data >>> lottery . current_round () 20 >>> lottery . current_ticket () 1124981 >>> lottery . status () Open >>> lottery . draw_date () 2021 - 07 - 12 20 : 00 : 00 >>> lottery . ticket_price () 0.32 >>> lottery . prize_pool () 63024 >>> lottery . prize_pool_allocation () { 'match_1' : 630 , 'match_2' : 1891 , 'match_3' : 3781 , 'match_4' : 6302 , 'match_5' : 12605 , 'match_6' : 25210 , 'burn' : 12605 } >>> lottery . total_tickets ( lotteryround = 23 ) 14253 >>> lottery . winning_numbers ( lotteryround = 16 ) 743350 >>> lottery . address_winnings ( \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) { 'tickets' : 8 , 'ticketids' : [ 634970 , 634971 , 634972 , 634973 , 634974 , 634975 , 634976 , 634977 ], 'winning_tickets' : [ 634970 , 634971 ]} >>> lottery . ticket_winnings ( lotteryround = 15 , ticketid = 567093 ) 865.536634168 >>> lottery . winners_per_bracket ( lotteryround = 16 ) { 'match_1' : 19133 , 'match_2' : 1921 , 'match_3' : 188 , 'match_4' : 21 , 'match_5' : 1 , 'match_6' : 1 } >>> lottery . cake_per_bracket ( lotteryround = 16 ) { 'match_1' : 0 , 'match_2' : 3 , 'match_3' : 62 , 'match_4' : 925 , 'match_5' : 38843 , 'match_6' : 77687 } >>> lottery . winning_probability () { 'match_1' : 10.0 , 'match_2' : 1.0 , 'match_3' : 0.1 , 'match_4' : 0.01 , 'match_5' : 0.001 , 'match_6' : 0.0001 }","title":"Usage"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"#disclaimer","text":"This project is not affiliated with the PancakeSwap team.","title":"Disclaimer"},{"location":"reference/","text":"Code Reference \u00b6 LotteryV2 \u00b6 Class for accessing PancakeSwap Lottery V2 smart-contract information. __init__ ( self , provider = 'https://bsc-dataseed.binance.org' ) special \u00b6 Initialize the object Attributes: Name Type Description provider str Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org Examples: lottery = LotteryV2() Source code in pancakeswap_lottery/lotteryv2.py def __init__ ( self , provider = \"https://bsc-dataseed.binance.org\" ): \"\"\"Initialize the object Attributes: provider (str): Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org Examples: lottery = LotteryV2() \"\"\" self . w3 = Web3 ( Web3 . HTTPProvider ( provider )) contract_addresses = { \"PancakeSwapLottery\" : \"0x5aF6D33DE2ccEC94efb1bDF8f92Bd58085432d2c\" , \"CakeToken\" : \"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\" , } self . lottery_contract = self . _load_contract ( abi_name = \"PancakeSwapLottery\" , address = contract_addresses [ \"PancakeSwapLottery\" ], ) self . token_contract = self . _load_contract ( abi_name = \"CakeToken\" , address = contract_addresses [ \"CakeToken\" ] ) self . decimals = 10 ** 18 address_winnings ( self , address , lotteryround ) \u00b6 Get lottery winnings (CAKE) for a given address and round Parameters: Name Type Description Default address int BSC address required lotteryround int Lottery round required Examples: >>> lottery . address_winnings ( \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) { 'tickets' : 8 , 'ticketids' : [ 634970 , 634971 , 634972 , 634973 , 634974 , 634975 , 634976 , 634977 ], 'winning_tickets' : [ 634970 , 634971 ]} Source code in pancakeswap_lottery/lotteryv2.py def address_winnings ( self , address , lotteryround ): \"\"\"Get lottery winnings (CAKE) for a given address and round Args: address (int): BSC address lotteryround (int): Lottery round Examples: >>> lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16) {'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]} \"\"\" userinfo = self . lottery_contract . functions . viewUserInfoForLotteryId ( self . w3 . toChecksumAddress ( address ), lotteryround , 0 , 100 , ) . call () count = 0 winning_tickets = [] for i in userinfo [ 2 ]: if i is True : winning_tickets . append ( userinfo [ 0 ][ count ]) count += 1 d = { \"tickets\" : userinfo [ 3 ], \"ticketids\" : userinfo [ 0 ], \"winning_tickets\" : winning_tickets , } return d cake_per_bracket ( self , lotteryround ) \u00b6 Get amount of CAKE won per ticket in each prize bracket Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . cake_per_bracket ( lotteryround = 16 ) { 'match_1' : 0.10150861284172895 , 'match_2' : 3.0330519877680375 , 'match_3' : 61.98396668619574 , 'match_4' : 924.8401378575238 , 'match_5' : 38843.285790016 , 'match_6' : 77686.571580032 } Source code in pancakeswap_lottery/lotteryv2.py def cake_per_bracket ( self , lotteryround ): \"\"\"Get amount of CAKE won per ticket in each prize bracket Args: lotteryround (int): Lottery round Examples: >>> lottery.cake_per_bracket(lotteryround=16) { 'match_1': 0.10150861284172895, 'match_2': 3.0330519877680375, 'match_3': 61.98396668619574, 'match_4': 924.8401378575238, 'match_5': 38843.285790016, 'match_6': 77686.571580032 } \"\"\" data = self . view_lottery ( lotteryround ) d = data . get ( \"cakePerBracket\" ) return d current_round ( self ) \u00b6 Get current lottery round number Examples: >>> lottery . current_round () 8 Source code in pancakeswap_lottery/lotteryv2.py def current_round ( self ): \"\"\"Get current lottery round number Examples: >>> lottery.current_round() 8 \"\"\" return self . lottery_contract . functions . currentLotteryId () . call () current_ticket ( self ) \u00b6 Get current ticket id Examples: >>> lottery . current_ticket () 38963 Source code in pancakeswap_lottery/lotteryv2.py def current_ticket ( self ): \"\"\"Get current ticket id Examples: >>> lottery.current_ticket() 38963 \"\"\" return self . lottery_contract . functions . currentTicketId () . call () draw_date ( self , lotteryround = None ) \u00b6 Get lottery draw date Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . draw_date () 141947 Source code in pancakeswap_lottery/lotteryv2.py def draw_date ( self , lotteryround = None ): \"\"\"Get lottery draw date Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.draw_date() 141947 \"\"\" if not lotteryround : lotteryround = self . current_round () lottery = self . view_lottery ( lotteryround ) lotter_date = lottery . get ( \"endTime\" ) return lotter_date prize_pool ( self , lotteryround = None ) \u00b6 Get total prize pool size in CAKE Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . prize_pool () 141947 Source code in pancakeswap_lottery/lotteryv2.py def prize_pool ( self , lotteryround = None ): \"\"\"Get total prize pool size in CAKE Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.prize_pool() 141947 \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) amount = data . get ( \"amountCollectedInCake\" ) return round ( amount ) prize_pool_allocation ( self , lotteryround = None ) \u00b6 Get prize pool allocation in CAKE Allocation percentages: - Match first 1: 1% - Match first 2: 3% - Match first 3: 6% - Match first 4: 10% - Match first 5: 20% - Match first 6: 40% - Burn Pool: 20% Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . prize_pool_allocation () { 'match_1' : 1419 , 'match_2' : 4258 , 'match_3' : 8517 , 'match_4' : 14195 , 'match_5' : 28389 , 'match_6' : 56779 , 'burn' : 28389 } Source code in pancakeswap_lottery/lotteryv2.py def prize_pool_allocation ( self , lotteryround = None ): \"\"\"Get prize pool allocation in CAKE Allocation percentages: - Match first 1: 1% - Match first 2: 3% - Match first 3: 6% - Match first 4: 10% - Match first 5: 20% - Match first 6: 40% - Burn Pool: 20% Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.prize_pool_allocation() { 'match_1': 1419, 'match_2': 4258, 'match_3': 8517, 'match_4': 14195, 'match_5': 28389, 'match_6': 56779, 'burn': 28389 } \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) prize_pool = data . get ( \"amountCollectedInCake\" ) d = { \"match_1\" : round ( prize_pool * 0.01 ), \"match_2\" : round ( prize_pool * 0.03 ), \"match_3\" : round ( prize_pool * 0.06 ), \"match_4\" : round ( prize_pool * 0.1 ), \"match_5\" : round ( prize_pool * 0.2 ), \"match_6\" : round ( prize_pool * 0.4 ), \"burn\" : round ( prize_pool * 0.2 ), } return d status ( self , lotteryround = None ) \u00b6 Get status of lottery round Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . status () Open Source code in pancakeswap_lottery/lotteryv2.py def status ( self , lotteryround = None ): \"\"\"Get status of lottery round Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.status() Open \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) lottery_status = data . get ( \"status\" ) return lottery_status ticket_price ( self , lotteryround = None ) \u00b6 Get ticket price in CAKE Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . ticket_price () 0.34 Source code in pancakeswap_lottery/lotteryv2.py def ticket_price ( self , lotteryround = None ): \"\"\"Get ticket price in CAKE Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.ticket_price() 0.34 \"\"\" if not lotteryround : lotteryround = self . current_round () lottery = self . view_lottery ( lotteryround ) price = lottery . get ( \"priceTicketInCake\" ) return price ticket_winnings ( self , lotteryround , ticketid ) \u00b6 Get lottery winnings (CAKE) for a given ticket and round Parameters: Name Type Description Default lotteryround int Lottery round required ticketid int Ticket id required Examples: >>> lottery . ticket_winnings ( lotteryround = 15 , ticketid = 567093 ) 865.536634168 Source code in pancakeswap_lottery/lotteryv2.py def ticket_winnings ( self , lotteryround , ticketid ): \"\"\"Get lottery winnings (CAKE) for a given ticket and round Args: lotteryround (int): Lottery round ticketid (int): Ticket id Examples: >>> lottery.ticket_winnings(lotteryround=15, ticketid=567093) 865.536634168 \"\"\" winnings = 0 brackets = [ 0 , 1 , 2 , 3 , 4 , 5 ] for bracket in brackets : data = self . lottery_contract . functions . viewRewardsForTicketId ( lotteryround , ticketid , bracket ) . call () if data > 0 : winnings = data / self . decimals return winnings total_tickets ( self , lotteryround ) \u00b6 Get total number of tickets in lottery round Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . total_tickets ( lotteryround = 23 ) 0 Source code in pancakeswap_lottery/lotteryv2.py def total_tickets ( self , lotteryround ): \"\"\"Get total number of tickets in lottery round Args: lotteryround (int): Lottery round Examples: >>> lottery.total_tickets(lotteryround=23) 0 \"\"\" current_round = self . current_round () if lotteryround > current_round : return 0 data = self . view_lottery ( lotteryround ) first_ticket_id = data . get ( \"firstTicketId\" ) last_ticket_id = data . get ( \"firstTicketIdNextLottery\" ) return int ( last_ticket_id - first_ticket_id ) winners_per_bracket ( self , lotteryround ) \u00b6 Get number of winners per prize bracket Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . winners_per_bracket ( lotteryround = 16 ) { 'match_1' : 19133 , 'match_2' : 1921 , 'match_3' : 188 , 'match_4' : 21 , 'match_5' : 1 , 'match_6' : 1 } Source code in pancakeswap_lottery/lotteryv2.py def winners_per_bracket ( self , lotteryround ): \"\"\"Get number of winners per prize bracket Args: lotteryround (int): Lottery round Examples: >>> lottery.winners_per_bracket(lotteryround=16) { 'match_1': 19133, 'match_2': 1921, 'match_3': 188, 'match_4': 21, 'match_5': 1, 'match_6': 1 } \"\"\" data = self . view_lottery ( lotteryround ) d = data . get ( \"countWinnersPerBracket\" ) return d winning_numbers ( self , lotteryround ) \u00b6 Get winning numbers for lottery round Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . winning_numbers ( lotteryround = 16 ) 0 Source code in pancakeswap_lottery/lotteryv2.py def winning_numbers ( self , lotteryround ): \"\"\"Get winning numbers for lottery round Args: lotteryround (int): Lottery round Examples: >>> lottery.winning_numbers(lotteryround=16) 0 \"\"\" data = self . view_lottery ( lotteryround ) final_number = str ( data . get ( \"finalNumber\" )) final_number = final_number [:: - 1 ][: - 1 ] return final_number winning_probability ( self , numbers_matched = None ) \u00b6 Get percentage probability of winning the lottery Parameters: Name Type Description Default numbers_matched obj: int , optional): Number of winning numbers matched None Examples: >>> lottery . winning_probability () { 'match_1' : 10.0 , 'match_2' : 1.0 , 'match_3' : 0.1 , 'match_4' : 0.01 , 'match_5' : 0.001 , 'match_6' : 0.0001 } Source code in pancakeswap_lottery/lotteryv2.py def winning_probability ( self , numbers_matched = None ): \"\"\"Get percentage probability of winning the lottery Args: numbers_matched (:obj:`int`, optional): Number of winning numbers matched Examples: >>> lottery.winning_probability() { 'match_1': 10.0, 'match_2': 1.0, 'match_3': 0.1, 'match_4': 0.01, 'match_5': 0.001, 'match_6': 0.0001 } \"\"\" possible_numbers = 10 matchballs = [ 1 , 2 , 3 , 4 , 5 , 6 ] probability_pct = {} if numbers_matched : if numbers_matched not in range ( 1 , 7 ): return \"Pick a number between 1 and 6\" e = possible_numbers ** numbers_matched odds = 1 / e * 100 return float ( f \" { odds : .4f } \" ) for matchball in matchballs : e = possible_numbers ** matchball odds = 1 / e * 100 probability_pct . update ({ f \"match_ { matchball } \" : float ( f \" { odds : .4f } \" )}) return probability_pct","title":"Code Reference"},{"location":"reference/#code-reference","text":"","title":"Code Reference"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2","text":"Class for accessing PancakeSwap Lottery V2 smart-contract information.","title":"LotteryV2"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.__init__","text":"Initialize the object Attributes: Name Type Description provider str Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org Examples: lottery = LotteryV2() Source code in pancakeswap_lottery/lotteryv2.py def __init__ ( self , provider = \"https://bsc-dataseed.binance.org\" ): \"\"\"Initialize the object Attributes: provider (str): Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org Examples: lottery = LotteryV2() \"\"\" self . w3 = Web3 ( Web3 . HTTPProvider ( provider )) contract_addresses = { \"PancakeSwapLottery\" : \"0x5aF6D33DE2ccEC94efb1bDF8f92Bd58085432d2c\" , \"CakeToken\" : \"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\" , } self . lottery_contract = self . _load_contract ( abi_name = \"PancakeSwapLottery\" , address = contract_addresses [ \"PancakeSwapLottery\" ], ) self . token_contract = self . _load_contract ( abi_name = \"CakeToken\" , address = contract_addresses [ \"CakeToken\" ] ) self . decimals = 10 ** 18","title":"__init__()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.address_winnings","text":"Get lottery winnings (CAKE) for a given address and round Parameters: Name Type Description Default address int BSC address required lotteryround int Lottery round required Examples: >>> lottery . address_winnings ( \"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\" , lotteryround = 16 ) { 'tickets' : 8 , 'ticketids' : [ 634970 , 634971 , 634972 , 634973 , 634974 , 634975 , 634976 , 634977 ], 'winning_tickets' : [ 634970 , 634971 ]} Source code in pancakeswap_lottery/lotteryv2.py def address_winnings ( self , address , lotteryround ): \"\"\"Get lottery winnings (CAKE) for a given address and round Args: address (int): BSC address lotteryround (int): Lottery round Examples: >>> lottery.address_winnings(\"0x621D6ee5FA9634d86396C13fAaD6A7827606A6d7\", lotteryround=16) {'tickets': 8, 'ticketids': [634970, 634971, 634972, 634973, 634974, 634975, 634976, 634977], 'winning_tickets': [634970, 634971]} \"\"\" userinfo = self . lottery_contract . functions . viewUserInfoForLotteryId ( self . w3 . toChecksumAddress ( address ), lotteryround , 0 , 100 , ) . call () count = 0 winning_tickets = [] for i in userinfo [ 2 ]: if i is True : winning_tickets . append ( userinfo [ 0 ][ count ]) count += 1 d = { \"tickets\" : userinfo [ 3 ], \"ticketids\" : userinfo [ 0 ], \"winning_tickets\" : winning_tickets , } return d","title":"address_winnings()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.cake_per_bracket","text":"Get amount of CAKE won per ticket in each prize bracket Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . cake_per_bracket ( lotteryround = 16 ) { 'match_1' : 0.10150861284172895 , 'match_2' : 3.0330519877680375 , 'match_3' : 61.98396668619574 , 'match_4' : 924.8401378575238 , 'match_5' : 38843.285790016 , 'match_6' : 77686.571580032 } Source code in pancakeswap_lottery/lotteryv2.py def cake_per_bracket ( self , lotteryround ): \"\"\"Get amount of CAKE won per ticket in each prize bracket Args: lotteryround (int): Lottery round Examples: >>> lottery.cake_per_bracket(lotteryround=16) { 'match_1': 0.10150861284172895, 'match_2': 3.0330519877680375, 'match_3': 61.98396668619574, 'match_4': 924.8401378575238, 'match_5': 38843.285790016, 'match_6': 77686.571580032 } \"\"\" data = self . view_lottery ( lotteryround ) d = data . get ( \"cakePerBracket\" ) return d","title":"cake_per_bracket()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.current_round","text":"Get current lottery round number Examples: >>> lottery . current_round () 8 Source code in pancakeswap_lottery/lotteryv2.py def current_round ( self ): \"\"\"Get current lottery round number Examples: >>> lottery.current_round() 8 \"\"\" return self . lottery_contract . functions . currentLotteryId () . call ()","title":"current_round()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.current_ticket","text":"Get current ticket id Examples: >>> lottery . current_ticket () 38963 Source code in pancakeswap_lottery/lotteryv2.py def current_ticket ( self ): \"\"\"Get current ticket id Examples: >>> lottery.current_ticket() 38963 \"\"\" return self . lottery_contract . functions . currentTicketId () . call ()","title":"current_ticket()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.draw_date","text":"Get lottery draw date Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . draw_date () 141947 Source code in pancakeswap_lottery/lotteryv2.py def draw_date ( self , lotteryround = None ): \"\"\"Get lottery draw date Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.draw_date() 141947 \"\"\" if not lotteryround : lotteryround = self . current_round () lottery = self . view_lottery ( lotteryround ) lotter_date = lottery . get ( \"endTime\" ) return lotter_date","title":"draw_date()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.prize_pool","text":"Get total prize pool size in CAKE Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . prize_pool () 141947 Source code in pancakeswap_lottery/lotteryv2.py def prize_pool ( self , lotteryround = None ): \"\"\"Get total prize pool size in CAKE Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.prize_pool() 141947 \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) amount = data . get ( \"amountCollectedInCake\" ) return round ( amount )","title":"prize_pool()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.prize_pool_allocation","text":"Get prize pool allocation in CAKE Allocation percentages: - Match first 1: 1% - Match first 2: 3% - Match first 3: 6% - Match first 4: 10% - Match first 5: 20% - Match first 6: 40% - Burn Pool: 20% Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . prize_pool_allocation () { 'match_1' : 1419 , 'match_2' : 4258 , 'match_3' : 8517 , 'match_4' : 14195 , 'match_5' : 28389 , 'match_6' : 56779 , 'burn' : 28389 } Source code in pancakeswap_lottery/lotteryv2.py def prize_pool_allocation ( self , lotteryround = None ): \"\"\"Get prize pool allocation in CAKE Allocation percentages: - Match first 1: 1% - Match first 2: 3% - Match first 3: 6% - Match first 4: 10% - Match first 5: 20% - Match first 6: 40% - Burn Pool: 20% Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.prize_pool_allocation() { 'match_1': 1419, 'match_2': 4258, 'match_3': 8517, 'match_4': 14195, 'match_5': 28389, 'match_6': 56779, 'burn': 28389 } \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) prize_pool = data . get ( \"amountCollectedInCake\" ) d = { \"match_1\" : round ( prize_pool * 0.01 ), \"match_2\" : round ( prize_pool * 0.03 ), \"match_3\" : round ( prize_pool * 0.06 ), \"match_4\" : round ( prize_pool * 0.1 ), \"match_5\" : round ( prize_pool * 0.2 ), \"match_6\" : round ( prize_pool * 0.4 ), \"burn\" : round ( prize_pool * 0.2 ), } return d","title":"prize_pool_allocation()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.status","text":"Get status of lottery round Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . status () Open Source code in pancakeswap_lottery/lotteryv2.py def status ( self , lotteryround = None ): \"\"\"Get status of lottery round Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.status() Open \"\"\" if not lotteryround : lotteryround = self . current_round () data = self . view_lottery ( lotteryround ) lottery_status = data . get ( \"status\" ) return lottery_status","title":"status()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.ticket_price","text":"Get ticket price in CAKE Parameters: Name Type Description Default lotteryround obj: int , optional): Lottery round None Examples: >>> lottery . ticket_price () 0.34 Source code in pancakeswap_lottery/lotteryv2.py def ticket_price ( self , lotteryround = None ): \"\"\"Get ticket price in CAKE Args: lotteryround (:obj:`int`, optional): Lottery round Examples: >>> lottery.ticket_price() 0.34 \"\"\" if not lotteryround : lotteryround = self . current_round () lottery = self . view_lottery ( lotteryround ) price = lottery . get ( \"priceTicketInCake\" ) return price","title":"ticket_price()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.ticket_winnings","text":"Get lottery winnings (CAKE) for a given ticket and round Parameters: Name Type Description Default lotteryround int Lottery round required ticketid int Ticket id required Examples: >>> lottery . ticket_winnings ( lotteryround = 15 , ticketid = 567093 ) 865.536634168 Source code in pancakeswap_lottery/lotteryv2.py def ticket_winnings ( self , lotteryround , ticketid ): \"\"\"Get lottery winnings (CAKE) for a given ticket and round Args: lotteryround (int): Lottery round ticketid (int): Ticket id Examples: >>> lottery.ticket_winnings(lotteryround=15, ticketid=567093) 865.536634168 \"\"\" winnings = 0 brackets = [ 0 , 1 , 2 , 3 , 4 , 5 ] for bracket in brackets : data = self . lottery_contract . functions . viewRewardsForTicketId ( lotteryround , ticketid , bracket ) . call () if data > 0 : winnings = data / self . decimals return winnings","title":"ticket_winnings()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.total_tickets","text":"Get total number of tickets in lottery round Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . total_tickets ( lotteryround = 23 ) 0 Source code in pancakeswap_lottery/lotteryv2.py def total_tickets ( self , lotteryround ): \"\"\"Get total number of tickets in lottery round Args: lotteryround (int): Lottery round Examples: >>> lottery.total_tickets(lotteryround=23) 0 \"\"\" current_round = self . current_round () if lotteryround > current_round : return 0 data = self . view_lottery ( lotteryround ) first_ticket_id = data . get ( \"firstTicketId\" ) last_ticket_id = data . get ( \"firstTicketIdNextLottery\" ) return int ( last_ticket_id - first_ticket_id )","title":"total_tickets()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winners_per_bracket","text":"Get number of winners per prize bracket Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . winners_per_bracket ( lotteryround = 16 ) { 'match_1' : 19133 , 'match_2' : 1921 , 'match_3' : 188 , 'match_4' : 21 , 'match_5' : 1 , 'match_6' : 1 } Source code in pancakeswap_lottery/lotteryv2.py def winners_per_bracket ( self , lotteryround ): \"\"\"Get number of winners per prize bracket Args: lotteryround (int): Lottery round Examples: >>> lottery.winners_per_bracket(lotteryround=16) { 'match_1': 19133, 'match_2': 1921, 'match_3': 188, 'match_4': 21, 'match_5': 1, 'match_6': 1 } \"\"\" data = self . view_lottery ( lotteryround ) d = data . get ( \"countWinnersPerBracket\" ) return d","title":"winners_per_bracket()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winning_numbers","text":"Get winning numbers for lottery round Parameters: Name Type Description Default lotteryround int Lottery round required Examples: >>> lottery . winning_numbers ( lotteryround = 16 ) 0 Source code in pancakeswap_lottery/lotteryv2.py def winning_numbers ( self , lotteryround ): \"\"\"Get winning numbers for lottery round Args: lotteryround (int): Lottery round Examples: >>> lottery.winning_numbers(lotteryround=16) 0 \"\"\" data = self . view_lottery ( lotteryround ) final_number = str ( data . get ( \"finalNumber\" )) final_number = final_number [:: - 1 ][: - 1 ] return final_number","title":"winning_numbers()"},{"location":"reference/#pancakeswap_lottery.lotteryv2.LotteryV2.winning_probability","text":"Get percentage probability of winning the lottery Parameters: Name Type Description Default numbers_matched obj: int , optional): Number of winning numbers matched None Examples: >>> lottery . winning_probability () { 'match_1' : 10.0 , 'match_2' : 1.0 , 'match_3' : 0.1 , 'match_4' : 0.01 , 'match_5' : 0.001 , 'match_6' : 0.0001 } Source code in pancakeswap_lottery/lotteryv2.py def winning_probability ( self , numbers_matched = None ): \"\"\"Get percentage probability of winning the lottery Args: numbers_matched (:obj:`int`, optional): Number of winning numbers matched Examples: >>> lottery.winning_probability() { 'match_1': 10.0, 'match_2': 1.0, 'match_3': 0.1, 'match_4': 0.01, 'match_5': 0.001, 'match_6': 0.0001 } \"\"\" possible_numbers = 10 matchballs = [ 1 , 2 , 3 , 4 , 5 , 6 ] probability_pct = {} if numbers_matched : if numbers_matched not in range ( 1 , 7 ): return \"Pick a number between 1 and 6\" e = possible_numbers ** numbers_matched odds = 1 / e * 100 return float ( f \" { odds : .4f } \" ) for matchball in matchballs : e = possible_numbers ** matchball odds = 1 / e * 100 probability_pct . update ({ f \"match_ { matchball } \" : float ( f \" { odds : .4f } \" )}) return probability_pct","title":"winning_probability()"},{"location":"guide/","text":"Introduction \u00b6 Import Lottery \u00b6 from pancakeswap_lottery import LotteryV2 Create Instance \u00b6 To retrieve data from the lottery smart-contract, create an instance of the LotteryV2 class: lottery = LotteryV2 () Example \u00b6 from pancakeswap_lottery import LotteryV2 lottery = LotteryV2 () # Lottery draw date and time of lottery round draw draw_date = lottery . draw_date ( lotteryround = 16 ) # Total prize pool of lottery round prize_pool = lottery . prize_pool ( lotteryround = 16 ) For more examples, see Examples .","title":"Introduction"},{"location":"guide/#introduction","text":"","title":"Introduction"},{"location":"guide/#import-lottery","text":"from pancakeswap_lottery import LotteryV2","title":"Import Lottery"},{"location":"guide/#create-instance","text":"To retrieve data from the lottery smart-contract, create an instance of the LotteryV2 class: lottery = LotteryV2 ()","title":"Create Instance"},{"location":"guide/#example","text":"from pancakeswap_lottery import LotteryV2 lottery = LotteryV2 () # Lottery draw date and time of lottery round draw draw_date = lottery . draw_date ( lotteryround = 16 ) # Total prize pool of lottery round prize_pool = lottery . prize_pool ( lotteryround = 16 ) For more examples, see Examples .","title":"Example"},{"location":"guide/examples/","text":"Examples \u00b6 Here's a few example use cases for this module: Lottery stats - Current lottery round stats Lottery history - Past lottery rounds stats Lottery stats \u00b6 Get stats from the current lottery round. Code from datetime import datetime from pancakeswap_lottery import LotteryV2 def format_datestr ( dt ): now = datetime . now () . astimezone () total_seconds = int (( dt - now ) . total_seconds ()) days , remainder = divmod ( total_seconds , 86400 ) hours , remainder = divmod ( remainder , 3600 ) minutes , seconds = divmod ( remainder , 60 ) d = { \"total_seconds\" : total_seconds , \"days\" : int ( days ), \"hours\" : int ( hours ), \"minutes\" : int ( minutes ), \"seconds\" : int ( seconds ), } if d [ \"hours\" ] == 0 : datestr = f \" { d [ 'minutes' ] } minutes\" else : datestr = f \" { d [ 'hours' ] } hours { d [ 'minutes' ] } minutes\" return datestr def get_lottery_stats (): lottery = LotteryV2 () lotteryround = lottery . current_round () prize_pool = lottery . prize_pool () draw_date = lottery . draw_date ( lotteryround ) . astimezone () drawdate_str = format_datestr ( draw_date ) allocation = lottery . prize_pool_allocation () prize_pool_match1 = allocation . get ( \"match_1\" ) prize_pool_match2 = allocation . get ( \"match_2\" ) prize_pool_match3 = allocation . get ( \"match_3\" ) prize_pool_match4 = allocation . get ( \"match_4\" ) prize_pool_match5 = allocation . get ( \"match_5\" ) prize_pool_match6 = allocation . get ( \"match_6\" ) ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\" ret_str += f \" \\n Round # { lotteryround } \" ret_str += f \" \\n Draw in { drawdate_str } ( { draw_date } )\" ret_str += \" \\n\\n \ud83d\udcb0 Prize pool\" ret_str += f \" \\n { int ( prize_pool ) } CAKE\" ret_str += \" \\n\\n \ud83d\udcb5 Prize pool allocation\" ret_str += f \" \\n Match 6: { prize_pool_match6 } CAKE\" ret_str += f \" \\n Match 5: { prize_pool_match5 } CAKE\" ret_str += f \" \\n Match 4: { prize_pool_match4 } CAKE\" ret_str += f \" \\n Match 3: { prize_pool_match3 } CAKE\" ret_str += f \" \\n Match 2: { prize_pool_match2 } CAKE\" ret_str += f \" \\n Match 1: { prize_pool_match1 } CAKE\" return ret_str lottery_stats = get_lottery_stats () print ( lottery_stats ) Output \ud83e\udd5e The CAKE Lottery \ud83e\udd5e Round #20 Draw in 5 hours 40 minutes (2021-07-12 20:00:00+02:00) \ud83d\udcb0 Prize pool 63402 CAKE \ud83d\udcb5 Prize pool allocation Match 6: 25361 CAKE Match 5: 12680 CAKE Match 4: 6340 CAKE Match 3: 3804 CAKE Match 2: 1902 CAKE Match 1: 634 CAKE Lottery history \u00b6 Get lottery history data ( Lottery Date , Round , Prize pool ) from the last X rounds. Code from pancakeswap_lottery import LotteryV2 def get_lottery_history ( last_rounds ): lottery = LotteryV2 () lotteryround = lottery . current_round () header = [ \"Lottery Date\" , \"Round\" , \"Prizes (CAKE)\" ] rows = [ header ] for i in range ( 0 , last_rounds ): lotteryround -= 1 draw_date = lottery . draw_date ( lotteryround ) draw_date_str = draw_date . strftime ( \"%Y-%m- %d %H:%M\" ) prize_pool = int ( lottery . prize_pool ( lotteryround )) row = [ draw_date_str , lotteryround , prize_pool ] rows . append ( row ) ret_str = \"\ud83e\udd5e The CAKE Lottery - History \\n \" ret_str += f \" \\n Last { last_rounds } lottery rounds: \\n\\n \" ret_str += \" \\n \" . join ([ \"\" . join ([ f \" { x : >16 } \" for x in r ]) for r in rows ]) return ret_str rounds = 10 # get data for last 10 rounds lottery_history = get_lottery_history ( rounds ) print ( lottery_history ) Output \ud83e\udd5e The CAKE Lottery - History Last 10 lottery rounds: Lottery Date Round Prizes (CAKE) 2021-07-12 08:00 19 77631 2021-07-11 20:00 18 145392 2021-07-11 08:00 17 5009 2021-07-10 20:00 16 194216 2021-07-10 08:00 15 86554 2021-07-09 20:00 14 100345 2021-07-09 08:00 13 7988 2021-07-08 20:00 12 130175 2021-07-08 08:00 11 76197 2021-07-07 20:00 10 141947","title":"Examples"},{"location":"guide/examples/#examples","text":"Here's a few example use cases for this module: Lottery stats - Current lottery round stats Lottery history - Past lottery rounds stats","title":"Examples"},{"location":"guide/examples/#lottery-stats","text":"Get stats from the current lottery round. Code from datetime import datetime from pancakeswap_lottery import LotteryV2 def format_datestr ( dt ): now = datetime . now () . astimezone () total_seconds = int (( dt - now ) . total_seconds ()) days , remainder = divmod ( total_seconds , 86400 ) hours , remainder = divmod ( remainder , 3600 ) minutes , seconds = divmod ( remainder , 60 ) d = { \"total_seconds\" : total_seconds , \"days\" : int ( days ), \"hours\" : int ( hours ), \"minutes\" : int ( minutes ), \"seconds\" : int ( seconds ), } if d [ \"hours\" ] == 0 : datestr = f \" { d [ 'minutes' ] } minutes\" else : datestr = f \" { d [ 'hours' ] } hours { d [ 'minutes' ] } minutes\" return datestr def get_lottery_stats (): lottery = LotteryV2 () lotteryround = lottery . current_round () prize_pool = lottery . prize_pool () draw_date = lottery . draw_date ( lotteryround ) . astimezone () drawdate_str = format_datestr ( draw_date ) allocation = lottery . prize_pool_allocation () prize_pool_match1 = allocation . get ( \"match_1\" ) prize_pool_match2 = allocation . get ( \"match_2\" ) prize_pool_match3 = allocation . get ( \"match_3\" ) prize_pool_match4 = allocation . get ( \"match_4\" ) prize_pool_match5 = allocation . get ( \"match_5\" ) prize_pool_match6 = allocation . get ( \"match_6\" ) ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\" ret_str += f \" \\n Round # { lotteryround } \" ret_str += f \" \\n Draw in { drawdate_str } ( { draw_date } )\" ret_str += \" \\n\\n \ud83d\udcb0 Prize pool\" ret_str += f \" \\n { int ( prize_pool ) } CAKE\" ret_str += \" \\n\\n \ud83d\udcb5 Prize pool allocation\" ret_str += f \" \\n Match 6: { prize_pool_match6 } CAKE\" ret_str += f \" \\n Match 5: { prize_pool_match5 } CAKE\" ret_str += f \" \\n Match 4: { prize_pool_match4 } CAKE\" ret_str += f \" \\n Match 3: { prize_pool_match3 } CAKE\" ret_str += f \" \\n Match 2: { prize_pool_match2 } CAKE\" ret_str += f \" \\n Match 1: { prize_pool_match1 } CAKE\" return ret_str lottery_stats = get_lottery_stats () print ( lottery_stats ) Output \ud83e\udd5e The CAKE Lottery \ud83e\udd5e Round #20 Draw in 5 hours 40 minutes (2021-07-12 20:00:00+02:00) \ud83d\udcb0 Prize pool 63402 CAKE \ud83d\udcb5 Prize pool allocation Match 6: 25361 CAKE Match 5: 12680 CAKE Match 4: 6340 CAKE Match 3: 3804 CAKE Match 2: 1902 CAKE Match 1: 634 CAKE","title":"Lottery stats"},{"location":"guide/examples/#lottery-history","text":"Get lottery history data ( Lottery Date , Round , Prize pool ) from the last X rounds. Code from pancakeswap_lottery import LotteryV2 def get_lottery_history ( last_rounds ): lottery = LotteryV2 () lotteryround = lottery . current_round () header = [ \"Lottery Date\" , \"Round\" , \"Prizes (CAKE)\" ] rows = [ header ] for i in range ( 0 , last_rounds ): lotteryround -= 1 draw_date = lottery . draw_date ( lotteryround ) draw_date_str = draw_date . strftime ( \"%Y-%m- %d %H:%M\" ) prize_pool = int ( lottery . prize_pool ( lotteryround )) row = [ draw_date_str , lotteryround , prize_pool ] rows . append ( row ) ret_str = \"\ud83e\udd5e The CAKE Lottery - History \\n \" ret_str += f \" \\n Last { last_rounds } lottery rounds: \\n\\n \" ret_str += \" \\n \" . join ([ \"\" . join ([ f \" { x : >16 } \" for x in r ]) for r in rows ]) return ret_str rounds = 10 # get data for last 10 rounds lottery_history = get_lottery_history ( rounds ) print ( lottery_history ) Output \ud83e\udd5e The CAKE Lottery - History Last 10 lottery rounds: Lottery Date Round Prizes (CAKE) 2021-07-12 08:00 19 77631 2021-07-11 20:00 18 145392 2021-07-11 08:00 17 5009 2021-07-10 20:00 16 194216 2021-07-10 08:00 15 86554 2021-07-09 20:00 14 100345 2021-07-09 08:00 13 7988 2021-07-08 20:00 12 130175 2021-07-08 08:00 11 76197 2021-07-07 20:00 10 141947","title":"Lottery history"},{"location":"guide/functions/","text":"Lottery V2 \u00b6 current_round - Get current lottery round number current_ticket - Get current ticket id status - Get status of lottery round draw_date - Get lottery draw date ticket_price - Get ticket price in CAKE prize_pool - Get total prize pool size in CAKE prize_pool_allocation - Get prize pool allocation in CAKE total_tickets - Get total number of tickets in lottery round winning_numbers - Get winning numbers for lottery round address_winnings - Get lottery winnings (CAKE) for a given address and round ticket_winnings - Get lottery winnings (CAKE) for a given ticket and round winners_per_bracket - Get number of winners per prize bracket cake_per_bracket - Get amount of CAKE won per ticket in each prize bracket winning_probability - Get percentage probability of winning the lottery","title":"Functions"},{"location":"guide/functions/#lottery-v2","text":"current_round - Get current lottery round number current_ticket - Get current ticket id status - Get status of lottery round draw_date - Get lottery draw date ticket_price - Get ticket price in CAKE prize_pool - Get total prize pool size in CAKE prize_pool_allocation - Get prize pool allocation in CAKE total_tickets - Get total number of tickets in lottery round winning_numbers - Get winning numbers for lottery round address_winnings - Get lottery winnings (CAKE) for a given address and round ticket_winnings - Get lottery winnings (CAKE) for a given ticket and round winners_per_bracket - Get number of winners per prize bracket cake_per_bracket - Get amount of CAKE won per ticket in each prize bracket winning_probability - Get percentage probability of winning the lottery","title":"Lottery V2"},{"location":"v1/reference/","text":"Code Reference \u00b6 Lottery \u00b6 Class for accessing PancakeSwap Lottery smart-contract information. __init__ ( self , provider = 'https://bsc-dataseed.binance.org:443' ) special \u00b6 Initialize the object Attributes: Name Type Description provider str Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org:443 Examples: lottery = Lottery() Source code in pancakeswap_lottery/lottery.py def __init__ ( self , provider = \"https://bsc-dataseed.binance.org:443\" ): \"\"\"Initialize the object Attributes: provider (str): Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org:443 Examples: lottery = Lottery() \"\"\" self . w3 = Web3 ( Web3 . HTTPProvider ( provider )) contract_addresses = { \"LotteryUpgradeProxy\" : \"0x3C3f2049cc17C136a604bE23cF7E42745edf3b91\" , \"LotteryNFT\" : \"0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\" , } self . lottery_contract = self . _load_contract ( abi_name = \"LotteryUpgradeProxy\" , address = contract_addresses [ \"LotteryUpgradeProxy\" ], ) self . token_contract = self . _load_contract ( abi_name = \"LotteryNFT\" , address = contract_addresses [ \"LotteryNFT\" ] ) self . decimals = 10 ** 18 get_allocation ( self ) \u00b6 Get prize pool allocation (percent) Examples: >>> lottery . get_allocation () { '1' : 50 , '2' : 20 , '3' : 10 } Source code in pancakeswap_lottery/lottery.py def get_allocation ( self ): \"\"\"Get prize pool allocation (percent) Examples: >>> lottery.get_allocation() {'1': 50, '2': 20, '3': 10} \"\"\" allocation = {} for i in range ( 0 , 3 ): alloc = self . lottery_contract . functions . allocation ( i ) . call () allocation [ f \" { i + 1 } \" ] = alloc return allocation get_balance_of ( self , address ) \u00b6 Get total number of tickets bought by a given address Parameters: Name Type Description Default address str BSC address required Examples: >>> lottery . get_balance_of ( \"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\" ) 2673 Source code in pancakeswap_lottery/lottery.py def get_balance_of ( self , address ): \"\"\"Get total number of tickets bought by a given address Args: address (str): BSC address Examples: >>> lottery.get_balance_of(\"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\") 2673 \"\"\" return self . token_contract . functions . balanceOf ( address ) . call () get_cake ( self ) \u00b6 Get CAKE contract address Examples: >>> lottery . get_cake () 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 Source code in pancakeswap_lottery/lottery.py def get_cake ( self ): \"\"\"Get CAKE contract address Examples: >>> lottery.get_cake() 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 \"\"\" return self . lottery_contract . functions . cake () . call () get_drawed ( self ) \u00b6 Check if current lottery round is drawed Examples: >>> lottery . get_drawed () False Source code in pancakeswap_lottery/lottery.py def get_drawed ( self ): \"\"\"Check if current lottery round is drawed Examples: >>> lottery.get_drawed() False \"\"\" return self . lottery_contract . functions . drawed () . call () get_drawing_phase ( self ) \u00b6 Get current lottery round drawing phase Examples: >>> lottery . get_drawing_phase () False Source code in pancakeswap_lottery/lottery.py def get_drawing_phase ( self ): \"\"\"Get current lottery round drawing phase Examples: >>> lottery.get_drawing_phase() False \"\"\" return self . lottery_contract . functions . drawingPhase () . call () get_history_amount ( self , issue_index ) \u00b6 Get numbers of tickets matched Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_history_amount ( 432 ) { '4' : 1 , '3' : 34 , '2' : 718 } Source code in pancakeswap_lottery/lottery.py def get_history_amount ( self , issue_index ): \"\"\"Get numbers of tickets matched Args: issue_index (int): Lottery round Examples: >>> lottery.get_history_amount(432) {'4': 1, '3': 34, '2': 718} \"\"\" history_amount = {} for i in range ( 1 , 4 ): winner = self . lottery_contract . functions . historyAmount ( issue_index , i ) . call () if i == 1 : history_amount [ \"4\" ] = int ( winner / self . decimals ) elif i == 2 : history_amount [ \"3\" ] = int ( winner / self . decimals ) elif i == 3 : history_amount [ \"2\" ] = int ( winner / self . decimals ) return history_amount get_history_numbers ( self , issue_index ) \u00b6 Get winning numbers of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_history_numbers ( 432 ) [ 2 , 13 , 7 , 3 ] Source code in pancakeswap_lottery/lottery.py def get_history_numbers ( self , issue_index ): \"\"\"Get winning numbers of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_history_numbers(432) [2, 13, 7, 3] \"\"\" history_numbers = [] for i in range ( 0 , 4 ): number = self . lottery_contract . functions . historyNumbers ( issue_index , i ) . call () history_numbers . append ( number ) return history_numbers get_issue_index ( self ) \u00b6 Get current lottery round id Examples: >>> lottery . get_issue_index () 435 Source code in pancakeswap_lottery/lottery.py def get_issue_index ( self ): \"\"\"Get current lottery round id Examples: >>> lottery.get_issue_index() 435 \"\"\" return self . lottery_contract . functions . issueIndex () . call () get_last_timestamp ( self , epoch = False ) \u00b6 Last updated (timestamp) Parameters: Name Type Description Default epoch bool Return as epoch timestamp? False Examples: >>> lottery . get_last_timestamp ( epoch = False ) 2021 - 03 - 27 11 : 38 : 49 Source code in pancakeswap_lottery/lottery.py def get_last_timestamp ( self , epoch = False ): \"\"\"Last updated (timestamp) Args: epoch (bool): Return as epoch timestamp? Examples: >>> lottery.get_last_timestamp(epoch=False) 2021-03-27 11:38:49 \"\"\" last_timestamp = self . lottery_contract . functions . lastTimestamp () . call () if epoch : return last_timestamp else : return datetime . fromtimestamp ( last_timestamp ) get_lottery_date ( self , issue_index ) \u00b6 Get date and time of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_lottery_date ( 432 ) 2021 - 03 - 26 02 : 00 : 00 + 00 : 00 Source code in pancakeswap_lottery/lottery.py def get_lottery_date ( self , issue_index ): \"\"\"Get date and time of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_lottery_date(432) 2021-03-26 02:00:00+00:00 \"\"\" lottery_date = generate_lottery_date ( issue_index ) return lottery_date get_lottery_numbers ( self , tokenid ) \u00b6 Get lottery numbers for a given ticket Parameters: Name Type Description Default tokenid int Lottery ticket id required Examples: >>> lottery . get_lottery_numbers ( 1328060 ) [ 11 , 5 , 14 , 6 ] Source code in pancakeswap_lottery/lottery.py def get_lottery_numbers ( self , tokenid ): \"\"\"Get lottery numbers for a given ticket Args: tokenid (int): Lottery ticket id Examples: >>> lottery.get_lottery_numbers(1328060) [11, 5, 14, 6] \"\"\" return self . token_contract . functions . getLotteryNumbers ( tokenid ) . call () get_lotteryNFT ( self ) \u00b6 Get PLT-token contract address Examples: >>> lottery . get_lotteryNFT () 0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1 Source code in pancakeswap_lottery/lottery.py def get_lotteryNFT ( self ): \"\"\"Get PLT-token contract address Examples: >>> lottery.get_lotteryNFT() 0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1 \"\"\" return self . lottery_contract . functions . lotteryNFT () . call () get_matching_reward_amount ( self , issue_index , matching_num ) \u00b6 Get number of tickets matched a specified number Parameters: Name Type Description Default issue_index int Lottery round required matching_num int Number to match required Examples: >>> lottery . get_matching_reward_amount ( 432 , 3 ) 34 Source code in pancakeswap_lottery/lottery.py def get_matching_reward_amount ( self , issue_index , matching_num ): \"\"\"Get number of tickets matched a specified number Args: issue_index (int): Lottery round matching_num (int): Number to match Examples: >>> lottery.get_matching_reward_amount(432, 3) 34 \"\"\" matching_reward_amount = ( self . lottery_contract . functions . getMatchingRewardAmount ( issue_index , matching_num ) . call () ) return int ( matching_reward_amount / self . decimals ) get_max_number ( self ) \u00b6 Get max number Examples: >>> lottery . get_max_number () 14 Source code in pancakeswap_lottery/lottery.py def get_max_number ( self ): \"\"\"Get max number Examples: >>> lottery.get_max_number() 14 \"\"\" return self . lottery_contract . functions . maxNumber () . call () get_min_price ( self ) \u00b6 Get current price of 1 ticket Examples: >>> lottery . get_min_price () 1 Source code in pancakeswap_lottery/lottery.py def get_min_price ( self ): \"\"\"Get current price of 1 ticket Examples: >>> lottery.get_min_price() 1 \"\"\" min_price = self . lottery_contract . functions . minPrice () . call () return int ( min_price / self . decimals ) get_reward_view ( self , tokenid ) \u00b6 Get rewards for a given ticket Parameters: Name Type Description Default tokenid int Lottery ticket id required Examples: >>> lottery . get_reward_view ( 1328060 ) 0 Source code in pancakeswap_lottery/lottery.py def get_reward_view ( self , tokenid ): \"\"\"Get rewards for a given ticket Args: tokenid (int): Lottery ticket id Examples: >>> lottery.get_reward_view(1328060) 0 \"\"\" return self . lottery_contract . functions . getRewardView ( tokenid ) . call () get_total_addresses ( self ) \u00b6 Get total addresses Examples: >>> lottery . get_total_addresses () 200 Source code in pancakeswap_lottery/lottery.py def get_total_addresses ( self ): \"\"\"Get total addresses Examples: >>> lottery.get_total_addresses() 200 \"\"\" return self . lottery_contract . functions . totalAddresses () . call () get_total_amount ( self ) \u00b6 Get total pot (CAKE) of current lottery round Examples: >>> lottery . get_total_amount () 34977.25 Source code in pancakeswap_lottery/lottery.py def get_total_amount ( self ): \"\"\"Get total pot (CAKE) of current lottery round Examples: >>> lottery.get_total_amount() 34977.25 \"\"\" total_amount = self . lottery_contract . functions . totalAmount () . call () return total_amount / self . decimals get_total_rewards ( self , issue_index ) \u00b6 Get total rewards of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_total_rewards ( 432 ) 51384.125 Source code in pancakeswap_lottery/lottery.py def get_total_rewards ( self , issue_index ): \"\"\"Get total rewards of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_total_rewards(432) 51384.125 \"\"\" total_rewards = self . lottery_contract . functions . getTotalRewards ( issue_index ) . call () return total_rewards / self . decimals","title":"Code Reference"},{"location":"v1/reference/#code-reference","text":"","title":"Code Reference"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery","text":"Class for accessing PancakeSwap Lottery smart-contract information.","title":"Lottery"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.__init__","text":"Initialize the object Attributes: Name Type Description provider str Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org:443 Examples: lottery = Lottery() Source code in pancakeswap_lottery/lottery.py def __init__ ( self , provider = \"https://bsc-dataseed.binance.org:443\" ): \"\"\"Initialize the object Attributes: provider (str): Web3 HTTPProvider. Defaults to https://bsc-dataseed.binance.org:443 Examples: lottery = Lottery() \"\"\" self . w3 = Web3 ( Web3 . HTTPProvider ( provider )) contract_addresses = { \"LotteryUpgradeProxy\" : \"0x3C3f2049cc17C136a604bE23cF7E42745edf3b91\" , \"LotteryNFT\" : \"0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1\" , } self . lottery_contract = self . _load_contract ( abi_name = \"LotteryUpgradeProxy\" , address = contract_addresses [ \"LotteryUpgradeProxy\" ], ) self . token_contract = self . _load_contract ( abi_name = \"LotteryNFT\" , address = contract_addresses [ \"LotteryNFT\" ] ) self . decimals = 10 ** 18","title":"__init__()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_allocation","text":"Get prize pool allocation (percent) Examples: >>> lottery . get_allocation () { '1' : 50 , '2' : 20 , '3' : 10 } Source code in pancakeswap_lottery/lottery.py def get_allocation ( self ): \"\"\"Get prize pool allocation (percent) Examples: >>> lottery.get_allocation() {'1': 50, '2': 20, '3': 10} \"\"\" allocation = {} for i in range ( 0 , 3 ): alloc = self . lottery_contract . functions . allocation ( i ) . call () allocation [ f \" { i + 1 } \" ] = alloc return allocation","title":"get_allocation()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_balance_of","text":"Get total number of tickets bought by a given address Parameters: Name Type Description Default address str BSC address required Examples: >>> lottery . get_balance_of ( \"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\" ) 2673 Source code in pancakeswap_lottery/lottery.py def get_balance_of ( self , address ): \"\"\"Get total number of tickets bought by a given address Args: address (str): BSC address Examples: >>> lottery.get_balance_of(\"0xc13456A34305e9265E907F70f76B1BA6E2055c8B\") 2673 \"\"\" return self . token_contract . functions . balanceOf ( address ) . call ()","title":"get_balance_of()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_cake","text":"Get CAKE contract address Examples: >>> lottery . get_cake () 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 Source code in pancakeswap_lottery/lottery.py def get_cake ( self ): \"\"\"Get CAKE contract address Examples: >>> lottery.get_cake() 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 \"\"\" return self . lottery_contract . functions . cake () . call ()","title":"get_cake()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_drawed","text":"Check if current lottery round is drawed Examples: >>> lottery . get_drawed () False Source code in pancakeswap_lottery/lottery.py def get_drawed ( self ): \"\"\"Check if current lottery round is drawed Examples: >>> lottery.get_drawed() False \"\"\" return self . lottery_contract . functions . drawed () . call ()","title":"get_drawed()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_drawing_phase","text":"Get current lottery round drawing phase Examples: >>> lottery . get_drawing_phase () False Source code in pancakeswap_lottery/lottery.py def get_drawing_phase ( self ): \"\"\"Get current lottery round drawing phase Examples: >>> lottery.get_drawing_phase() False \"\"\" return self . lottery_contract . functions . drawingPhase () . call ()","title":"get_drawing_phase()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_history_amount","text":"Get numbers of tickets matched Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_history_amount ( 432 ) { '4' : 1 , '3' : 34 , '2' : 718 } Source code in pancakeswap_lottery/lottery.py def get_history_amount ( self , issue_index ): \"\"\"Get numbers of tickets matched Args: issue_index (int): Lottery round Examples: >>> lottery.get_history_amount(432) {'4': 1, '3': 34, '2': 718} \"\"\" history_amount = {} for i in range ( 1 , 4 ): winner = self . lottery_contract . functions . historyAmount ( issue_index , i ) . call () if i == 1 : history_amount [ \"4\" ] = int ( winner / self . decimals ) elif i == 2 : history_amount [ \"3\" ] = int ( winner / self . decimals ) elif i == 3 : history_amount [ \"2\" ] = int ( winner / self . decimals ) return history_amount","title":"get_history_amount()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_history_numbers","text":"Get winning numbers of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_history_numbers ( 432 ) [ 2 , 13 , 7 , 3 ] Source code in pancakeswap_lottery/lottery.py def get_history_numbers ( self , issue_index ): \"\"\"Get winning numbers of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_history_numbers(432) [2, 13, 7, 3] \"\"\" history_numbers = [] for i in range ( 0 , 4 ): number = self . lottery_contract . functions . historyNumbers ( issue_index , i ) . call () history_numbers . append ( number ) return history_numbers","title":"get_history_numbers()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_issue_index","text":"Get current lottery round id Examples: >>> lottery . get_issue_index () 435 Source code in pancakeswap_lottery/lottery.py def get_issue_index ( self ): \"\"\"Get current lottery round id Examples: >>> lottery.get_issue_index() 435 \"\"\" return self . lottery_contract . functions . issueIndex () . call ()","title":"get_issue_index()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_last_timestamp","text":"Last updated (timestamp) Parameters: Name Type Description Default epoch bool Return as epoch timestamp? False Examples: >>> lottery . get_last_timestamp ( epoch = False ) 2021 - 03 - 27 11 : 38 : 49 Source code in pancakeswap_lottery/lottery.py def get_last_timestamp ( self , epoch = False ): \"\"\"Last updated (timestamp) Args: epoch (bool): Return as epoch timestamp? Examples: >>> lottery.get_last_timestamp(epoch=False) 2021-03-27 11:38:49 \"\"\" last_timestamp = self . lottery_contract . functions . lastTimestamp () . call () if epoch : return last_timestamp else : return datetime . fromtimestamp ( last_timestamp )","title":"get_last_timestamp()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lottery_date","text":"Get date and time of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_lottery_date ( 432 ) 2021 - 03 - 26 02 : 00 : 00 + 00 : 00 Source code in pancakeswap_lottery/lottery.py def get_lottery_date ( self , issue_index ): \"\"\"Get date and time of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_lottery_date(432) 2021-03-26 02:00:00+00:00 \"\"\" lottery_date = generate_lottery_date ( issue_index ) return lottery_date","title":"get_lottery_date()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lottery_numbers","text":"Get lottery numbers for a given ticket Parameters: Name Type Description Default tokenid int Lottery ticket id required Examples: >>> lottery . get_lottery_numbers ( 1328060 ) [ 11 , 5 , 14 , 6 ] Source code in pancakeswap_lottery/lottery.py def get_lottery_numbers ( self , tokenid ): \"\"\"Get lottery numbers for a given ticket Args: tokenid (int): Lottery ticket id Examples: >>> lottery.get_lottery_numbers(1328060) [11, 5, 14, 6] \"\"\" return self . token_contract . functions . getLotteryNumbers ( tokenid ) . call ()","title":"get_lottery_numbers()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_lotteryNFT","text":"Get PLT-token contract address Examples: >>> lottery . get_lotteryNFT () 0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1 Source code in pancakeswap_lottery/lottery.py def get_lotteryNFT ( self ): \"\"\"Get PLT-token contract address Examples: >>> lottery.get_lotteryNFT() 0x5e74094Cd416f55179DBd0E45b1a8ED030e396A1 \"\"\" return self . lottery_contract . functions . lotteryNFT () . call ()","title":"get_lotteryNFT()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_matching_reward_amount","text":"Get number of tickets matched a specified number Parameters: Name Type Description Default issue_index int Lottery round required matching_num int Number to match required Examples: >>> lottery . get_matching_reward_amount ( 432 , 3 ) 34 Source code in pancakeswap_lottery/lottery.py def get_matching_reward_amount ( self , issue_index , matching_num ): \"\"\"Get number of tickets matched a specified number Args: issue_index (int): Lottery round matching_num (int): Number to match Examples: >>> lottery.get_matching_reward_amount(432, 3) 34 \"\"\" matching_reward_amount = ( self . lottery_contract . functions . getMatchingRewardAmount ( issue_index , matching_num ) . call () ) return int ( matching_reward_amount / self . decimals )","title":"get_matching_reward_amount()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_max_number","text":"Get max number Examples: >>> lottery . get_max_number () 14 Source code in pancakeswap_lottery/lottery.py def get_max_number ( self ): \"\"\"Get max number Examples: >>> lottery.get_max_number() 14 \"\"\" return self . lottery_contract . functions . maxNumber () . call ()","title":"get_max_number()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_min_price","text":"Get current price of 1 ticket Examples: >>> lottery . get_min_price () 1 Source code in pancakeswap_lottery/lottery.py def get_min_price ( self ): \"\"\"Get current price of 1 ticket Examples: >>> lottery.get_min_price() 1 \"\"\" min_price = self . lottery_contract . functions . minPrice () . call () return int ( min_price / self . decimals )","title":"get_min_price()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_reward_view","text":"Get rewards for a given ticket Parameters: Name Type Description Default tokenid int Lottery ticket id required Examples: >>> lottery . get_reward_view ( 1328060 ) 0 Source code in pancakeswap_lottery/lottery.py def get_reward_view ( self , tokenid ): \"\"\"Get rewards for a given ticket Args: tokenid (int): Lottery ticket id Examples: >>> lottery.get_reward_view(1328060) 0 \"\"\" return self . lottery_contract . functions . getRewardView ( tokenid ) . call ()","title":"get_reward_view()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_addresses","text":"Get total addresses Examples: >>> lottery . get_total_addresses () 200 Source code in pancakeswap_lottery/lottery.py def get_total_addresses ( self ): \"\"\"Get total addresses Examples: >>> lottery.get_total_addresses() 200 \"\"\" return self . lottery_contract . functions . totalAddresses () . call ()","title":"get_total_addresses()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_amount","text":"Get total pot (CAKE) of current lottery round Examples: >>> lottery . get_total_amount () 34977.25 Source code in pancakeswap_lottery/lottery.py def get_total_amount ( self ): \"\"\"Get total pot (CAKE) of current lottery round Examples: >>> lottery.get_total_amount() 34977.25 \"\"\" total_amount = self . lottery_contract . functions . totalAmount () . call () return total_amount / self . decimals","title":"get_total_amount()"},{"location":"v1/reference/#pancakeswap_lottery.lottery.Lottery.get_total_rewards","text":"Get total rewards of lottery round Parameters: Name Type Description Default issue_index int Lottery round required Examples: >>> lottery . get_total_rewards ( 432 ) 51384.125 Source code in pancakeswap_lottery/lottery.py def get_total_rewards ( self , issue_index ): \"\"\"Get total rewards of lottery round Args: issue_index (int): Lottery round Examples: >>> lottery.get_total_rewards(432) 51384.125 \"\"\" total_rewards = self . lottery_contract . functions . getTotalRewards ( issue_index ) . call () return total_rewards / self . decimals","title":"get_total_rewards()"},{"location":"v1/guide/","text":"Introduction \u00b6 Import Lottery \u00b6 from pancakeswap_lottery import Lottery Create Instance \u00b6 To retrieve data from the lottery smart-contract, create an instance of the Lottery class: lottery = Lottery () Example \u00b6 from pancakeswap_lottery import Lottery lottery = Lottery () # Lottery round #432 issue_index = 432 # Date and time of lottery round lottery_date = lottery . get_lottery_date ( issue_index ) # Total rewards of lottery round total_rewards = lottery . get_total_rewards ( issue_index ) For more examples, see Examples .","title":"Introduction"},{"location":"v1/guide/#introduction","text":"","title":"Introduction"},{"location":"v1/guide/#import-lottery","text":"from pancakeswap_lottery import Lottery","title":"Import Lottery"},{"location":"v1/guide/#create-instance","text":"To retrieve data from the lottery smart-contract, create an instance of the Lottery class: lottery = Lottery ()","title":"Create Instance"},{"location":"v1/guide/#example","text":"from pancakeswap_lottery import Lottery lottery = Lottery () # Lottery round #432 issue_index = 432 # Date and time of lottery round lottery_date = lottery . get_lottery_date ( issue_index ) # Total rewards of lottery round total_rewards = lottery . get_total_rewards ( issue_index ) For more examples, see Examples .","title":"Example"},{"location":"v1/guide/examples/","text":"Examples \u00b6 Here's a few example use cases for this module: Lottery stats - Current lottery round stats Lottery history - Past lottery rounds stats Lottery stats \u00b6 Get stats from the current lottery round. Code from datetime import datetime from pancakeswap_lottery import Lottery def format_datestr ( dt ): now = datetime . now () . astimezone () total_seconds = int (( dt - now ) . total_seconds ()) days , remainder = divmod ( total_seconds , 86400 ) hours , remainder = divmod ( remainder , 3600 ) minutes , seconds = divmod ( remainder , 60 ) d = { \"total_seconds\" : total_seconds , \"days\" : int ( days ), \"hours\" : int ( hours ), \"minutes\" : int ( minutes ), \"seconds\" : int ( seconds ), } if d [ \"hours\" ] == 0 : datestr = f \" { d [ 'minutes' ] } minutes\" else : datestr = f \" { d [ 'hours' ] } hours { d [ 'minutes' ] } minutes\" return datestr def get_lottery_stats (): lottery = Lottery () issue_index = lottery . get_issue_index () pool_size = lottery . get_total_amount () lottery_date = lottery . get_lottery_date ( issue_index ) drawdate_str = format_datestr ( lottery_date ) allocation = lottery . get_allocation () prize_pool_match4 = int ( pool_size * allocation . get ( \"1\" ) / 100 ) prize_pool_match3 = int ( pool_size * allocation . get ( \"2\" ) / 100 ) prize_pool_match2 = int ( pool_size * allocation . get ( \"3\" ) / 100 ) ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\" ret_str += f \" \\n Round # { issue_index } \" ret_str += f \" \\n Draw in { drawdate_str } ( { lottery_date . strftime ( '%Y-%m- %d %H:%M' ) } )\" ret_str += \" \\n\\n \ud83d\udcb0 Pool size\" ret_str += f \" \\n { int ( pool_size ) } CAKE\" ret_str += \" \\n\\n \ud83d\udcb5 Prize pool allocation\" ret_str += f \" \\n Match 4: { prize_pool_match4 } CAKE\" ret_str += f \" \\n Match 3: { prize_pool_match3 } CAKE\" ret_str += f \" \\n Match 2: { prize_pool_match2 } CAKE\" return ret_str lottery_stats = get_lottery_stats () print ( lottery_stats ) Output \ud83e\udd5e The CAKE Lottery \ud83e\udd5e Round #481 Draw in 2 hours 2 minutes (2021-04-19 14:00) \ud83d\udcb0 Pool size 1581 CAKE \ud83d\udcb5 Prize pool allocation Match 4: 790 CAKE Match 3: 316 CAKE Match 2: 158 CAKE Lottery history \u00b6 Get lottery history data ( Lottery Date , Round , Prize pool ) from the last X rounds. Code from pancakeswap_lottery import Lottery def get_lottery_history ( last_rounds ): lottery = Lottery () issue_index = lottery . get_issue_index () header = [ \"Lottery Date\" , \"Round\" , \"Prizes (CAKE)\" ] rows = [ header ] for i in range ( 0 , last_rounds ): issue_index -= 1 lottery_date = lottery . get_lottery_date ( issue_index ) lottery_date_str = lottery_date . strftime ( \"%Y-%m- %d %H:%M\" ) total_rewards = int ( lottery . get_total_rewards ( issue_index )) row = [ lottery_date_str , issue_index , total_rewards ] rows . append ( row ) ret_str = \"\ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e \\n\\n \" ret_str += f \"Showing data for last { last_rounds } rounds: \\n\\n \" ret_str += \" \\n \" . join ([ \"\" . join ([ f \" { x : >16 } \" for x in r ]) for r in rows ]) return ret_str rounds = 10 # get data for last 10 rounds lottery_history = get_lottery_history ( rounds ) print ( lottery_history ) Output \ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e Showing data for last 10 rounds: Lottery Date Round Prizes (CAKE) 2021-04-19 02:00 480 91715 2021-04-18 14:00 479 44838 2021-04-18 02:00 478 3203 2021-04-17 14:00 477 1736 2021-04-17 02:00 476 52022 2021-04-16 14:00 475 47675 2021-04-16 02:00 474 1736 2021-04-15 14:00 473 3088 2021-04-15 02:00 472 113863 2021-04-14 14:00 471 61936","title":"Examples"},{"location":"v1/guide/examples/#examples","text":"Here's a few example use cases for this module: Lottery stats - Current lottery round stats Lottery history - Past lottery rounds stats","title":"Examples"},{"location":"v1/guide/examples/#lottery-stats","text":"Get stats from the current lottery round. Code from datetime import datetime from pancakeswap_lottery import Lottery def format_datestr ( dt ): now = datetime . now () . astimezone () total_seconds = int (( dt - now ) . total_seconds ()) days , remainder = divmod ( total_seconds , 86400 ) hours , remainder = divmod ( remainder , 3600 ) minutes , seconds = divmod ( remainder , 60 ) d = { \"total_seconds\" : total_seconds , \"days\" : int ( days ), \"hours\" : int ( hours ), \"minutes\" : int ( minutes ), \"seconds\" : int ( seconds ), } if d [ \"hours\" ] == 0 : datestr = f \" { d [ 'minutes' ] } minutes\" else : datestr = f \" { d [ 'hours' ] } hours { d [ 'minutes' ] } minutes\" return datestr def get_lottery_stats (): lottery = Lottery () issue_index = lottery . get_issue_index () pool_size = lottery . get_total_amount () lottery_date = lottery . get_lottery_date ( issue_index ) drawdate_str = format_datestr ( lottery_date ) allocation = lottery . get_allocation () prize_pool_match4 = int ( pool_size * allocation . get ( \"1\" ) / 100 ) prize_pool_match3 = int ( pool_size * allocation . get ( \"2\" ) / 100 ) prize_pool_match2 = int ( pool_size * allocation . get ( \"3\" ) / 100 ) ret_str = \"\ud83e\udd5e The CAKE Lottery \ud83e\udd5e\" ret_str += f \" \\n Round # { issue_index } \" ret_str += f \" \\n Draw in { drawdate_str } ( { lottery_date . strftime ( '%Y-%m- %d %H:%M' ) } )\" ret_str += \" \\n\\n \ud83d\udcb0 Pool size\" ret_str += f \" \\n { int ( pool_size ) } CAKE\" ret_str += \" \\n\\n \ud83d\udcb5 Prize pool allocation\" ret_str += f \" \\n Match 4: { prize_pool_match4 } CAKE\" ret_str += f \" \\n Match 3: { prize_pool_match3 } CAKE\" ret_str += f \" \\n Match 2: { prize_pool_match2 } CAKE\" return ret_str lottery_stats = get_lottery_stats () print ( lottery_stats ) Output \ud83e\udd5e The CAKE Lottery \ud83e\udd5e Round #481 Draw in 2 hours 2 minutes (2021-04-19 14:00) \ud83d\udcb0 Pool size 1581 CAKE \ud83d\udcb5 Prize pool allocation Match 4: 790 CAKE Match 3: 316 CAKE Match 2: 158 CAKE","title":"Lottery stats"},{"location":"v1/guide/examples/#lottery-history","text":"Get lottery history data ( Lottery Date , Round , Prize pool ) from the last X rounds. Code from pancakeswap_lottery import Lottery def get_lottery_history ( last_rounds ): lottery = Lottery () issue_index = lottery . get_issue_index () header = [ \"Lottery Date\" , \"Round\" , \"Prizes (CAKE)\" ] rows = [ header ] for i in range ( 0 , last_rounds ): issue_index -= 1 lottery_date = lottery . get_lottery_date ( issue_index ) lottery_date_str = lottery_date . strftime ( \"%Y-%m- %d %H:%M\" ) total_rewards = int ( lottery . get_total_rewards ( issue_index )) row = [ lottery_date_str , issue_index , total_rewards ] rows . append ( row ) ret_str = \"\ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e \\n\\n \" ret_str += f \"Showing data for last { last_rounds } rounds: \\n\\n \" ret_str += \" \\n \" . join ([ \"\" . join ([ f \" { x : >16 } \" for x in r ]) for r in rows ]) return ret_str rounds = 10 # get data for last 10 rounds lottery_history = get_lottery_history ( rounds ) print ( lottery_history ) Output \ud83e\udd5e The CAKE Lottery - History \ud83e\udd5e Showing data for last 10 rounds: Lottery Date Round Prizes (CAKE) 2021-04-19 02:00 480 91715 2021-04-18 14:00 479 44838 2021-04-18 02:00 478 3203 2021-04-17 14:00 477 1736 2021-04-17 02:00 476 52022 2021-04-16 14:00 475 47675 2021-04-16 02:00 474 1736 2021-04-15 14:00 473 3088 2021-04-15 02:00 472 113863 2021-04-14 14:00 471 61936","title":"Lottery history"},{"location":"v1/guide/functions/","text":"General \u00b6 get_lottery_date - Get date and time of lottery round get_cake - Get CAKE contract address get_lotteryNFT - Get PLT-token contract address get_max_number - Get max number get_min_price - Get current price of 1 ticket get_balance_of - Get total number of tickets bought by a given address Next draw \u00b6 get_allocation - Get prize pool allocation (percent) get_drawed - Check if current lottery round is drawed get_drawing_phase - Get current lottery round drawing phase get_issue_index - Get current lottery round id get_last_timestamp - Last updated (timestamp) get_total_addresses - Get total addresses get_total_amount - Get total pot (CAKE) of current lottery round Past draws \u00b6 get_history_amount - Get numbers of tickets matched get_history_numbers - Get winning numbers of lottery round get_lottery_numbers - Get lottery numbers for a given ticket get_matching_reward_amount - Get number of tickets matched a specified number get_reward_view - Get rewards for a given ticket get_total_rewards - Get total rewards of lottery round","title":"Functions"},{"location":"v1/guide/functions/#general","text":"get_lottery_date - Get date and time of lottery round get_cake - Get CAKE contract address get_lotteryNFT - Get PLT-token contract address get_max_number - Get max number get_min_price - Get current price of 1 ticket get_balance_of - Get total number of tickets bought by a given address","title":"General"},{"location":"v1/guide/functions/#next-draw","text":"get_allocation - Get prize pool allocation (percent) get_drawed - Check if current lottery round is drawed get_drawing_phase - Get current lottery round drawing phase get_issue_index - Get current lottery round id get_last_timestamp - Last updated (timestamp) get_total_addresses - Get total addresses get_total_amount - Get total pot (CAKE) of current lottery round","title":"Next draw"},{"location":"v1/guide/functions/#past-draws","text":"get_history_amount - Get numbers of tickets matched get_history_numbers - Get winning numbers of lottery round get_lottery_numbers - Get lottery numbers for a given ticket get_matching_reward_amount - Get number of tickets matched a specified number get_reward_view - Get rewards for a given ticket get_total_rewards - Get total rewards of lottery round","title":"Past draws"}]}